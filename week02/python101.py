#!/bin/python3

#print string
print("Strings and things:")
print("Hello, world!")
print("""Hello, this is
a multi-line string!""")
print("this is"+" a string")

print("********************************************************")
print('\n') # new line

# Math
print("Math time:")
print(50+50) # add
print(50-50) # subtract
print(50*50) # multiply
print(50/50) # divide
print(50+50-50*50/50) # PEMDAS
print(50**2) # exponents
print(50%2) # modulo
print(50//6) # number without leftovers

print("********************************************************")
print('\n') # new line

# Variables & Methods
print("Fun with variables and methods")
quote="All is fair in love and scripting" # declare variable
print(len(quote)) #length
print 
print(quote.upper()) # uppercase
print(quote.lower()) # lowercase
print(quote.title()) # title case

name="w3bguy"
age=1000 # int or int(1000)
gpa=3.97 # float or float(3.97)

print(int(age))
print(int(29.9)) # integer does not round

print("My name is "+name+" and I am "+str(age)+" years old")

print('\n') # new line

age+=1 # increment
print(age)

birthday=1
age+=birthday
print(age)

print("********************************************************")
print('\n') # new line

# Functions
print("Functions")
def who_am_i():
	name="w3bguy"
	age=1000
	print("My name is "+name+" and I am "+str(age)+" years old")

who_am_i()

# Adding in parameters
def add_one_hundred(num):
	print(num+100)

add_one_hundred(100)

# add in multiple parameters
def add(x,y):
	print(x+y)

add(7,7)
add(305,207.3)

#using return
def multiply(x,y):
	return x*y

print(multiply(7,7))

def squareRoot(x):
	return x**.5

print(squareRoot(64))


print("********************************************************")
print('\n') # new line

# Boolean expressions (True or False)
print("Boolean Expressions")
bool1=True
bool2=3*3==9
bool3=False
bool4=3*3!=9

print(bool1,bool2,bool3,bool4)
print(type(bool1))

bool5="True"
print(type(bool5))

print("********************************************************")
print('\n') # new line

#Relational and Boolean variables
greater_than=7>5
less_than=5<7
greater_than_equal_to=7>=7
less_than_equal_to=7<=7

print(greater_than,less_than,greater_than_equal_to,less_than_equal_to)

test_and=(7>5) and (8<7)
test_or=(7>5) or (5<7)
test_not=not True

print(test_and,test_or,test_not)


print("********************************************************")
print('\n') # new line

# Conditional Statements
print("Conditional Statements")
def soda(money):
	if money >= 2:
		return "You've got yourself a soda!"
	else:
		return "You are short $"+str(2-money)+"!"

print(soda(3))
print(soda(1.25))

print('\n') # new line

def alcohol(age, money):
	if(age>=21) and (money>=5):
		return "We're getting tipsy"
	elif(age>=21) and (money<5):
		return "You are short $"+str(5-money)+"!"
	elif(age<21) and (money>=5):
		return "Nice try kid"
	else:
		return "You're too poor and too young"


print(alcohol(22,10))
print(alcohol(22,2.40))
print(alcohol(17,25))
print(alcohol(4,1.33))


print("********************************************************")
print('\n') # new line

# Lists
print("Lists have brackets")
movies=["Hackers","The Princess Bride","Some other movie"]

print(movies[0]) # 0 indexed like normal
print(movies[0:2])
print(movies[1:]) # Slicing = 1 till end
print(movies[:1]) # Slicing = begining till 1
print(movies[-1]) # last element
print(len(movies))

movies.append("added movie")
print(movies)

movies.pop() # remove last item if no number given
print(movies)

movies.pop(2) # remove ID'd item
print(movies)


print('\n') # new line
movies=["Hackers","The Princess Bride","Some other movie"]
person=["Everyone","w3bguy","some rando"]
combined=zip(movies,person) # combine lists
print(list(combined))



print('\n') # new line
movies=["Hackers","The Princess Bride","Some other movie"]
person=["Everyone","w3bguy"]
combined=zip(movies,person) # combine lists
print(list(combined))


print("********************************************************")
print('\n') # new line

# Tuples
print("Tuples have parentheses and cannot change")
grades=("A","B","C","D","F")
print(grades)
print(grades[1])


print("********************************************************")
print('\n') # new line

# Looping
print("For Loops - start to finish of iterate")
vegetables=["carrot","spinach","cabbage"]
for x in vegetables:
	print(x)

print('\n') # new line
print("While loops - Execute as long as True:")
i=1
while i<10:
	print(i)
	i+=1



print("********************************************************")
print('\n') # new line










